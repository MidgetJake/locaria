service: locus-api
#configValidationMode: error
projectDir: ../../
provider:
  name: aws
  profile: ${file(../../locus-custom.yml):${self:custom.stage}.profile}
  #lambdaHashingVersion: 20201221
  runtime: nodejs10.x
  environment:
    postgresHost:
      Fn::GetAtt: [ AuroraRDSInstance , Endpoint.Address ]
    postgresPort:
      Fn::GetAtt: [ AuroraRDSInstance , Endpoint.Port ]
      # TODO fix this for .env via https://www.serverless.com/plugins/serverless-export-env/
    auroraDatabaseName: ${file(../../locus-custom.yml):${self:custom.stage}.auroraDatabaseName}
    auroraMasterUser: ${file(../../locus-custom.yml):${self:custom.stage}.auroraMasterUser}
    auroraMasterPass: ${file(../../locus-custom.yml):${self:custom.stage}.auroraMasterPass}
    cfdist: !Ref WebsiteDistribution
    fargateRouterHost: internal-locus-margate-125434216.eu-west-1.elb.amazonaws.com
    fargateRouterPort: 5000
    poolClient: !Ref CognitoUserPoolClient
    pool: !Ref CognitoUserPool
  region: ${file(../../locus-custom.yml):${self:custom.stage}.region}
  websocketsApiName: locus-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action
  memorySize: 512
  timeout: 30
  logRetentionInDays: 30
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::*
        - Effect: 'Allow'
          Action:
            - cloudfront:*
          Resource:
            - "*"

custom:
  stage: "${opt:stage, self:provider.stage}"
  cors:
    origins:
      - '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - x-token
    allowCredentials: false
  customDomain:
    rest:
      basePath: ""
      certificateName: ${file(../../locus-custom.yml):${self:custom.stage}.restdomain}
      domainName: ${file(../../locus-custom.yml):${self:custom.stage}.restdomain}
      #stage: ${self:custom.stage}
      createRoute53Record: false
      endpointType: 'edge'
    websocket:
      basePath: ""
      certificateName: ${file(../../locus-custom.yml):${self:custom.stage}.wsdomain}
      domainName: ${file(../../locus-custom.yml):${self:custom.stage}.wsdomain}
      #stage: ${self:custom.stage}
      createRoute53Record: false
      endpointType: 'regional'


resources:
  Resources:
    # Website
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${file(../../locus-custom.yml):${self:custom.stage}.domain}
        WebsiteConfiguration:
          IndexDocument: index.html
    DataImportBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: BucketOwnerRead
        BucketName: ${file(../../locus-custom.yml):${self:custom.stage}.domain}-data
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: StaticSite }
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: { "Fn::Join": [ "", [ "arn:aws:s3:::", { Ref: StaticSite }, "/*" ] ] }
              Principal:
                AWS: { "Fn::Join": [ " ", [ "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebsiteOriginAccessIdentity } ] ] }
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}"
    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods: [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: WebsiteBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'
          CustomErrorResponses:
            - ErrorCode: '404'
              ResponsePagePath: "/index.html"
              ErrorCachingMinTTL: 1
              ResponseCode: 200
          DefaultRootObject: 'index.html'
          Enabled: true
          PriceClass: 'PriceClass_100'
          HttpVersion: 'http2'
          Aliases:
            - ${file(../../locus-custom.yml):${self:custom.stage}.domain}
          ViewerCertificate:
            AcmCertificateArn: ${file(../../locus-custom.yml):${self:custom.stage}.certARN}
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only
          Origins:
            - Id: 'WebsiteBucketOrigin'
              DomainName: { 'Fn::GetAtt': [ StaticSite, DomainName ] }
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join": [ "", [ "origin-access-identity/cloudfront/", { Ref: WebsiteOriginAccessIdentity } ] ] }
    #    WebsiteDNSName:
    #      Type: AWS::Route53::RecordSetGroup
    #      Properties:
    #        HostedZoneId: 'Z06171983OLSUA1GYRUP4'
    #        RecordSets:
    #          - Name: ${file(../../locus-custom.yml):${self:custom.stage}.domain}
    #            Type: A
    #            AliasTarget:
    #              HostedZoneId: Z2FDTNDATAQYW2
    #              DNSName: !GetAtt [ WebsiteDistribution, DomainName ]
    #              EvaluateTargetHealth: false
    # VPC
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    IP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: VPC
        InternetGatewayId:
          Ref: InternetGateway
    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - IP
            - AllocationId
        SubnetId:
          Ref: PublicSubnetA
    PrivateSubnetA:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.1.0/24"
        Tags:
          - Key: Name
            Value: PrivateSubnetA
    PrivateSubnetB:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.3.0/24"
        Tags:
          - Key: Name
            Value: PrivateSubnetB
    PublicSubnetA:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.2.0/24"
        Tags:
          - Key: Name
            Value: PublicSubnetA
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTableAssociationLambdaPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnetA
        RouteTableId:
          Ref: PrivateRouteTable
    SubnetRouteTableAssociationLambdaPrivateB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnetB
        RouteTableId:
          Ref: PrivateRouteTable
    SubnetRouteTableAssociationLambdaPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnetA
        RouteTableId:
          Ref: PublicRouteTable
    ServerlessSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: VPC
    ServerlessStorageSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '6379'
            ToPort: '6379'
            SourceSecurityGroupId:
              Ref: ServerlessSecurityGroup
    # Make some security for VPN
    VPNSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for VPN
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: UDP
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
    ServerlessCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
          - Ref: PrivateSubnetA
    ElasticCacheCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t2.small
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ServerlessCacheSubnetGroup
    FarGateSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for fargate
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '5000'
            CidrIp: 10.0.0.0/16
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '5000'
            CidrIp: 10.1.0.0/22
    # Aurora
    # 'lambda:InvokeFunction'
    AuroraLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - rds.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "lambda:InvokeFunction"
                  Resource: '*'
        Path: "/"
    AuroraStorageSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Aurora
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: 10.0.0.0/16
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: 10.1.0.0/22
    AuroraSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Aurora Subnet Group"
        SubnetIds:
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
    AuroraRDSClusterParameter:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          max_connections: 5000
    AuroraRDSInstanceParameter:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql12
        Parameters:
          max_connections: 5000
    AuroraRDSCluster:
      Type: "AWS::RDS::DBCluster"
      Properties:
        MasterUsername: ${file(../../locus-custom.yml):${self:custom.stage}.auroraMasterUser}
        MasterUserPassword: ${file(../../locus-custom.yml):${self:custom.stage}.auroraMasterPass}
        DBSubnetGroupName:
          Ref: AuroraSubnetGroup
        Engine: aurora-postgresql
        EngineMode: provisioned
        EngineVersion: "12.7"
        DatabaseName: ${file(../../locus-custom.yml):${self:custom.stage}.auroraDatabaseName}
        BackupRetentionPeriod: 3
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter
        VpcSecurityGroupIds:
          - Fn::GetAtt: AuroraStorageSecurityGroup.GroupId
    AuroraRDSInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBSubnetGroupName:
          Ref: AuroraSubnetGroup
        Engine: aurora-postgresql
        EngineVersion: "12.7"
        DBInstanceClass: "db.r5.large"
        PubliclyAccessible: false
        DBParameterGroupName:
          Ref: AuroraRDSInstanceParameter
        DBClusterIdentifier:
          Ref: AuroraRDSCluster
    #User pools Cognito
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: locus-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: locus-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
        CallbackURLs:
          - http://localhost:8080/index.html
        AllowedOAuthFlows:
          - code
          - implicit
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthScopes:
          - openid
          - email
          - phone
          - profile
          - aws.cognito.signin.user.admin
        AllowedOAuthFlowsUserPoolClient: true
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        CustomDomainConfig:
          CertificateArn: ${file(../../locus-custom.yml):${self:custom.stage}.cognitoCertARN}
        Domain: ${file(../../locus-custom.yml):${self:custom.stage}.cognitoDomainName}
        UserPoolId:
          Ref: CognitoUserPool
functions:
  api:
    handler: functions/api.run
    vpc:
      securityGroupIds:
        - Fn::GetAtt: [ ServerlessSecurityGroup,GroupId ]
      subnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
    events:
      - http:
          path: /search
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /bboxsearch
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /refsearch
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /pointsearch
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /datesearch
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /locate
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /version
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /list_categories
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /get_item
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /address_search
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /revgeocoder
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /report
          method: POST
          cors: ${self:custom.cors}
      - http:
          path: /version
          method: GET
          cors: ${self:custom.cors}
      - http:
          path: /list_categories_with_data
          method: GET
          cors: ${self:custom.cors}
      - http:
          path: /list_categories
          method: GET
          cors: ${self:custom.cors}
      - http:
          path: /search
          method: GET
          cors: ${self:custom.cors}
      - http:
          path: /get_item/{fid}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                fid: true
      - http:
          path: /search/{category}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                category: true
      - http:
          path: /search/{category}/{search_text}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
      - http:
          path: /search/{category}/{search_text}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
                limit: true
      - http:
          path: /search/{category}/{search_text}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
                limit: true
                offset: true
      - http:
          path: /filtersearch/{category}/{filter}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                category: true
                filter: true
      - http:
          path: /filtersearch/{category}/{filter}/{search_text}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
                filter: true
      - http:
          path: /filtersearch/{category}/{filter}/{search_text}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
                limit: true
                filter: true
      - http:
          path: /filtersearch/{category}/{filter}/{search_text}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                search_text: true
                category: true
                limit: true
                offset: true
                filter: true
      - http:
          path: /bboxsearch/{bbox}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                bbox: true
      - http:
          path: /bboxsearch/{bbox}/{category}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                bbox: true
                category: true
      - http:
          path: /bboxsearch/{bbox}/{category}/{search_text}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                bbox: true
                search_text: true
                category: true
      - http:
          path: /bboxsearch/{bbox}/{category}/{search_text}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                bbox: true
                search_text: true
                category: true
                limit: true
      - http:
          path: /bboxsearch/{bbox}/{category}/{search_text}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                bbox: true
                search_text: true
                category: true
                limit: true
                offset: true
      - http:
          path: /pointsearch/{location}/{location_distance}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
      - http:
          path: /pointsearch/{location}/{location_distance}/{category}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
                category: true
      - http:
          path: /pointsearch/{location}/{location_distance}/{category}/{search_text}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
                search_text: true
                category: true
      - http:
          path: /pointsearch/{location}/{location_distance}/{category}/{search_text}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
                search_text: true
                category: true
                limit: true
      - http:
          path: /pointsearch/{location}/{location_distance}/{category}/{search_text}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
                search_text: true
                category: true
                limit: true
                offset: true
      - http:
          path: /datesearch/{start_date}/{end_date}/{category}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                category: true
                start_date: true
                end_date: true
      - http:
          path: /datesearch/{start_date}/{end_date}/{category}/{search_text}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                category: true
                start_date: true
                end_date: true
                search_text: true
      - http:
          path: /datesearch/{start_date}/{end_date}/{category}/{search_text}/{location}/{location_distance}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                location: true
                location_distance: true
                category: true
                start_date: true
                end_date: true
                search_text: true
      - http:
          path: /refsearch/{reference}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                reference: true
      - http:
          path: /refsearch/{reference}/{category}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                reference: true
                category: true
      - http:
          path: /refsearch/{reference}/{category}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                reference: true
                category: true
                limit: true
      - http:
          path: /refsearch/{reference}/{category}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                reference: true
                category: true
                limit: true
                offset: true

      - http:
          path: /address_search/{address}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                address: true
      - http:
          path: /address_search/{address}/{limit}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                address: true
                limit: true
      - http:
          path: /address_search/{address}/{limit}/{offset}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                address: true
                limit: true
                offset: true
      - http:
          path: /revgeocoder/{lon}/{lat}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                lon: true
                lat: true
      - http:
          path: /report/{report_name}/{location}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                report_name: true
                location: true
      - http:
          path: /report/{report_name}/{location}/{report_parameters}
          method: GET
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                report_name: true
                location: true
                report_parameters: true

  connectionHandler:
    handler: functions/ws-api.run
    vpc:
      securityGroupIds:
        - Fn::GetAtt: [ ServerlessSecurityGroup,GroupId ]
      subnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: functions/ws-api.run
    vpc:
      securityGroupIds:
        - Fn::GetAtt: [ ServerlessSecurityGroup,GroupId ]
      subnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
    events:
      - websocket:
          route: $default
  router:
    handler: functions/router.run
plugins:
  - serverless-domain-manager
  - serverless-export-env