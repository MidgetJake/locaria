service: locaria-ws-${env:site}
projectDir: ../../../
provider:
  name: aws
  profile: ${file(../../../locaria.json):${self:custom.stage}.profile}
  runtime: nodejs14.x
  region: ${file(../../../locaria.json):${self:custom.stage}.region}
  environment:
    postgresHost: ${file(../outputs.json):postgresHost}
    postgresPort: ${file(../outputs.json):postgresPort}
    auroraDatabaseName: locaria-${env:site}
    auroraMasterUser: ${file(../../locaria.json):${self:custom.stage}.auroraMasterUser}
    auroraMasterPass: ${file(../../locaria.json):${self:custom.stage}.auroraMasterPass}

custom:
  stage: ${opt:stage, self:provider.stage}

functions:
  connectionHandler:
    handler: ws-api.run
    vpc:
      securityGroupIds:
        - ${file(../outputs.json):ServerlessSecurityGroup}
      SubnetIds:
        - ${file(../outputs.json):vpcPrivateSubnetA}
        - ${file(../outputs.json):vpcPrivateSubnetB}
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: ws-api.run
    vpc:
      securityGroupIds:
        - ${file(../outputs.json):ServerlessSecurityGroup}
      SubnetIds:
        - ${file(../outputs.json):vpcPrivateSubnetA}
        - ${file(../outputs.json):vpcPrivateSubnetB}
    events:
      - websocket:
          route: $default

plugins:
  - serverless-stack-output