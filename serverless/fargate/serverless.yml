service: locaria-fargate-${env:theme}
projectDir: ../../../
provider:
  name: aws
  profile: ${file(../../../locaria.json):${self:custom.stage}.profile}
  runtime: nodejs14.x
  region: ${file(../../../locaria.json):${self:custom.stage}.region}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - ecs:*
          Resource:
            - "*"
        - Effect: 'Allow'
          Action:
            - iam:*
          Resource:
            - "*"

custom:
  stage: "${opt:stage, self:provider.stage}"

resources:
  Resources:
    ECRLocariaRepo:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: locaria-repo-fileloader-${env:theme}
        ImageScanningConfiguration:
          ScanOnPush: "true"
    ECRLocariaRepoDownload:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: locaria-repo-download-${env:theme}
        ImageScanningConfiguration:
          ScanOnPush: "true"
    ECSLocariaCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: locaria-cluster-fileloader-${env:theme}
    SecretDBURI:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: LOCARIADB connection string
        Name: LOCARIADB_${env:theme}
        SecretString:
          "postgresql://${file(../../../locaria.json):${self:custom.stage}.auroraMasterUser}:${file(../../../locaria.json):${self:custom.stage}.auroraMasterPass}@${file(../outputs/${self:custom.stage}-outputs.json):postgresHost}:${file(../outputs/${self:custom.stage}-outputs.json):postgresPort}/locaria${env:theme}"
    SecretDLBUCKET:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: LOCARIADB Download S3 Bucket
        Name: S3DLBUCKET_${env:theme}
        SecretString:
          "locaria-${self:custom.stage}-${env:theme}"
    DockerGenericRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:GetBucketLocation"
                    - "s3:DeleteObject"
                  Resource:
                    - "arn:aws:s3:::locaria-${self:custom.stage}-${env:theme}"
                    - "arn:aws:s3:::locaria-${self:custom.stage}-${env:theme}/*"
        Path: "/"
    DockerGenericExecuteRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                      - "ecr:GetAuthorizationToken"
                      - "ecr:BatchCheckLayerAvailability"
                      - "ecr:GetDownloadUrlForLayer"
                      - "ecr:BatchGetImage"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                    - "kms:Decrypt"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "*"
    DockerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: locaria-cluster-log-${env:theme}
    taskFileLoader:
      Type: AWS::ECS::TaskDefinition
      Properties:
        RequiresCompatibilities:
          - FARGATE
        NetworkMode: awsvpc
        TaskRoleArn: { 'Fn::GetAtt': [ DockerGenericRole, Arn ] }
        ExecutionRoleArn: { 'Fn::GetAtt': [ DockerGenericExecuteRole, Arn ] }
        ContainerDefinitions:
          -
            Image: { 'Fn::GetAtt': [ ECRLocariaRepo, RepositoryUri ] }
            Essential: true
            Name: "FileLoader"
            Secrets:
              -
                Name: LOCARIADB_${env:theme}
                ValueFrom: !Ref SecretDBURI
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: locaria-cluster-log-${env:theme}
                awslogs-region: ${file(../../../locaria.json):${self:custom.stage}.region}
                awslogs-stream-prefix: locaria-cluster-fileloader-${env:theme}
        Cpu: 256
        Memory: 512

functions:
  ecsRunner:
    handler: functions/ecsRunTask.run
    vpc:
      securityGroupIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):ServerlessSecurityGroup}
      subnetIds:
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetA}
        - ${file(../outputs/${self:custom.stage}-outputs.json):vpcPrivateSubnetB}


plugins:
  - serverless-stack-output